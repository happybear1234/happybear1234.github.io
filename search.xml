<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Datawhale零基础入门数据挖掘-Task1</title>
    <url>/2020/03/21/Datawhale%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-Task1/</url>
    <content><![CDATA[<ul>
<li><p>学习背景:由Datawhale与天池开放的零基础入门数据挖掘赛事-<a href="https://tianchi.aliyun.com/competition/entrance/231784/introduction?spm=5176.12281949.1003.2.493e2448KgHsEd" target="_blank" rel="noopener">二手车交易价格预测</a></p>
</li>
<li><p>赛题概括:赛题以预测二手车的交易价格为任务，数据集报名后可见并可下载，该数据来自某交易平台的二手车交易记录，总数据量超过40w，包含31列变量信息，其中15列为匿名变量。为了保证比赛的公平性，将会从中抽取15万条作为训练集，5万条作为测试集A，5万条作为测试集B，同时会对name、model、brand和regionCode等信息进行脱敏。</p>
</li>
</ul>
<h1 id="赛题分析"><a href="#赛题分析" class="headerlink" title="赛题分析"></a>赛题分析</h1><h2 id="数据概括"><a href="#数据概括" class="headerlink" title="数据概括"></a>数据概括</h2><p>一般而言，对于数据在比赛界面都有对应的数据概况介绍（匿名特征除外），说明列的性质特征。了解列的性质会有助于我们对于数据的理解和后续分析。 Tip:匿名特征，就是未告知数据列所属的性质的特征列。</p>
<blockquote>
<p>train.csv</p>
<ul>
<li>SaleID - 销售样本ID</li>
<li>name - 汽车编码</li>
<li>regDate - 汽车注册时间</li>
<li>model - 车型编码</li>
<li>brand - 品牌</li>
<li>bodyType - 车身类型</li>
<li>fuelType - 燃油类型</li>
<li>gearbox - 变速箱</li>
<li>power - 汽车功率</li>
<li>kilometer - 汽车行驶公里</li>
<li>notRepairedDamage - 汽车有尚未修复的损坏</li>
<li>regionCode - 看车地区编码</li>
<li>seller - 销售方</li>
<li>offerType - 报价类型</li>
<li>creatDate - 广告发布时间</li>
<li>price - 汽车价格</li>
<li>‘v_0’, ‘v_1’, ‘v_2’, ‘v_3’, ‘v_4’, ‘v_5’, ‘v_6’, ‘v_7’, ‘v_8’, ‘v_9’, ‘v_10’, ‘v_11’, ‘v_12’, ‘v_13’,’v_14’ 【匿名特征，包含v0-14在内15个匿名特征】 　</li>
</ul>
</blockquote>
<h2 id="评测标准"><a href="#评测标准" class="headerlink" title="评测标准"></a>评测标准</h2><p>赛题评价目标为MAE(Mean Absolute Error):</p>
<blockquote>
<p><img src="https://s1.ax1x.com/2020/03/21/8hVCfs.png" alt=""><br>MAE越小，说明模型预测得越准确</p>
</blockquote>
<h2 id="预测建模"><a href="#预测建模" class="headerlink" title="预测建模"></a>预测建模</h2><ul>
<li>预测建模就是使用历史数据建立一个模型，去给没有答案的新数据做预测的问题</li>
</ul>
<p>关于预测建模，可以在下面这篇文章中了解更多信息:</p>
<blockquote>
<p>Gentle Introduction to Predictive Modeling: <a href="https://machinelearningmastery.com/gentle-introduction-to-predictive-modeling/" target="_blank" rel="noopener">https://machinelearningmastery.com/gentle-introduction-to-predictive-modeling/</a></p>
</blockquote>
<p>预测建模可以被描述成一个近似求取从输入变量（X）到输出变量（y）的映射函数的数学问题。这被称为函数逼近问题</p>
<p>建模算法的任务就是在给定的可用时间和资源的限制下，去寻找最佳映射函数。更多关于机器学习中应用逼近函数的内容，请参阅下面这篇文章：</p>
<blockquote>
<p>机器学习是如何运行的（how machine learning work,<a href="https://machinelearningmastery.com/how-machine-learning-algorithms-work/" target="_blank" rel="noopener">https://machinelearningmastery.com/how-machine-learning-algorithms-work/</a>)</p>
</blockquote>
<p>一般而言，我们可以将函数逼近任务划分为分类任务和回归任务</p>
<h3 id="分类预测建模"><a href="#分类预测建模" class="headerlink" title="分类预测建模"></a>分类预测建模</h3><p>分类预测建模是逼近一个从输入变量（X）到离散的输出变量（y）之间的映射函数（f）</p>
<p>输出变量经常被称作标签或者类别。映射函数会对一个给定的观察样本预测一个类别标签</p>
<p>例如，一个文本邮件可以被归为两类：「垃圾邮件」，和「非垃圾邮件」</p>
<ul>
<li>分类问题需要把样本分为两类或者多类</li>
<li>分类的输入可以是实数也可以有离散变量</li>
<li>只有两个类别的分类问题经常被称作两类问题或者二元分类问题</li>
<li>具有多于两类的问题经常被称作多分类问题</li>
<li>样本属于多个类别的问题被称作多标签分类问题</li>
</ul>
<p>分类模型经常为输入样本预测得到与每一类别对应的像概率一样的连续值。这些概率可以被解释为样本属于每个类别的似然度或者置信度。预测到的概率可以通过选择概率最高的类别转换成类别标签</p>
<p>例如，某封邮件可能以 0.1 的概率被分为「垃圾邮件」，以 0.9 的概率被分为「非垃圾邮件」。因为非垃圾邮件的标签的概率最大，所以我们可以将概率转换成「非垃圾邮件」的标签</p>
<p>有很多用来衡量分类预测模型的性能的指标，但是分类准确率可能是最常用的一个</p>
<p>例如，如果一个分类预测模型做了 5 个预测，其中有 3 个是正确的，2 个这是错误的，那么这个模型的准确率就是 60%：</p>
<blockquote>
<p>accuracy = correct predictions / total predictions * 100<br>accuracy = 3 / 5 * 100<br>accuracy = 60%</p>
</blockquote>
<p>能够学习分类模型的算法就叫做分类算法</p>
<h3 id="回归预测模型"><a href="#回归预测模型" class="headerlink" title="回归预测模型"></a>回归预测模型</h3><p>回归预测建模是逼近一个从输入变量（X）到连续的输出变量（y）的函数映射</p>
<p>连续输出变量是一个实数，例如一个整数或者浮点数。这些变量通常是数量或者尺寸大小等等</p>
<p>例如，一座房子可能被预测到以 xx 美元出售，也许会在 $100,000 t 到$200,000 的范围内</p>
<ul>
<li>回归问题需要预测一个数量</li>
<li>回归的输入变量可以是连续的也可以是离散的</li>
<li>有多个输入变量的通常被称作多变量回归</li>
<li>输入变量是按照时间顺序的回归称为时间序列预测问题</li>
<li>因为回归预测问题预测的是一个数量，所以模型的性能可以用预测结果中的错误来评价</li>
</ul>
<p>有很多评价回归预测模型的方式，但是最常用的一个可能是计算误差值的均方根，即 RMSE</p>
<p>例如，如果回归预测模型做出了两个预测结果，一个是 1.5，对应的期望结果是 1.0；另一个是 3.3 对应的期望结果是 3.0. 那么，这两个回归预测的 RMSE 如下：</p>
<blockquote>
<p>RMSE = sqrt(average(error^2))<br>RMSE = sqrt(((1.0 - 1.5)^2 + (3.0 - 3.3)^2) / 2)<br>RMSE = sqrt((0.25 + 0.09) / 2)<br>RMSE = sqrt(0.17)<br>RMSE = 0.412</p>
</blockquote>
<p>使用 RMSE 的好处就是错误评分的单位与预测结果是一样的</p>
<p>一个能够学习回归预测模型的算法称作回归算法</p>
<p>有些算法的名字也有「regression,回归」一词，例如线性回归和 logistics 回归，这种情况有时候会让人迷惑因为线性回归确实是一个回归问题，但是 logistics 回归却是一个分类问题</p>
<h3 id="分类-vs-回归"><a href="#分类-vs-回归" class="headerlink" title="分类 vs 回归"></a>分类 vs 回归</h3><p>分类预测建模问题与回归预测建模问题是不一样的</p>
<ul>
<li>分类是预测一个离散标签的任务</li>
<li>回归是预测一个连续数量的任务</li>
</ul>
<p>分类和回归也有一些相同的地方：</p>
<ul>
<li>分类算法可能预测到一个连续的值，但是这些连续值对应的是一个类别的概率的形式</li>
<li>回归算法可以预测离散值，但是以整型量的形式预测离散值的</li>
</ul>
<p>有些算法既可以用来分类，也可以稍作修改就用来做回归问题，例如决策树和人工神经网络。但是一些算法就不行了——或者说是不太容易用于这两种类型的问题，例如线性回归是用来做回归预测建模的，logistics 回归是用来做分类预测建模的</p>
<p>重要的是，我们评价分类模型和预测模型的方式是不一样的，例如：</p>
<ul>
<li>分类预测可以使用准确率来评价，而回归问题则不能</li>
<li>回归预测可以使用均方根误差来评价，但是分类问题则不能</li>
</ul>
<h3 id="分类问题和回归问题之间的转换"><a href="#分类问题和回归问题之间的转换" class="headerlink" title="分类问题和回归问题之间的转换"></a>分类问题和回归问题之间的转换</h3><p>在一些情况中是可以将回归问题转换成分类问题的。例如，被预测的数量是可以被转换成离散数值的范围的</p>
<p>例如，在$0 到$100 之间的金额可以被分为两个区间：</p>
<ul>
<li>class 0：$0 到$49</li>
<li>class 1: $50 到$100</li>
</ul>
<p>这通常被称作离散化，结果中的输出变量是一个分类，分类的标签是有顺序的（称为叙序数）</p>
<p>在一些情况中，分类是可以转换成回归问题的。例如，一个标签可以被转换成一个连续的范围</p>
<p>一些算法早已通过为每一个类别预测一个概率，这个概率反过来又可以被扩展到一个特定的数值范围：</p>
<blockquote>
<p>quantity = min + probability * range</p>
</blockquote>
<p>与此对应，一个类别值也可以被序数化，并且映射到一个连续的范围中：</p>
<ul>
<li>$0 到 $49 是类别 1</li>
<li>$0 到 $49 是类别 2</li>
</ul>
<p>如果分类问题中的类别标签没有自然顺序的关系，那么从分类问题到回归问题的转换也许会导致奇怪的结果或者很差的性能，因为模型可能学到一个并不存在于从输入到连续输出之间的映射函数</p>
<p><em>原文链接</em><a href="https://machinelearningmastery.com/classification-versus-regression-in-machine-learning/" target="_blank" rel="noopener">https://machinelearningmastery.com/classification-versus-regression-in-machine-learning/</a></p>
<h2 id="关于评价指标"><a href="#关于评价指标" class="headerlink" title="关于评价指标"></a>关于评价指标</h2><ul>
<li>评估指标即是我们对于一个模型效果的数值型量化。（有点类似与对于一个商品评价打分，而这是针对于模型效果和理想效果之间的一个打分）</li>
</ul>
<p>一般来说分类和回归问题的评价指标有如下一些形式：</p>
<h3 id="分类算法常见的评估指标如下："><a href="#分类算法常见的评估指标如下：" class="headerlink" title="分类算法常见的评估指标如下："></a>分类算法常见的评估指标如下：</h3><blockquote>
<ul>
<li>对于二类分类器/分类算法，评价指标主要有accuracy， Precision，Recall，F-score，Pr曲线，ROC-AUC曲线</li>
<li>对于多类分类器/分类算法，评价指标主要有accuracy， 宏平均和微平均，F-score</li>
</ul>
</blockquote>
<h3 id="对于回归预测类常见的评估指标如下"><a href="#对于回归预测类常见的评估指标如下" class="headerlink" title="对于回归预测类常见的评估指标如下:"></a>对于回归预测类常见的评估指标如下:</h3><blockquote>
<ul>
<li>平均绝对误差（Mean Absolute Error，MAE），均方误差（Mean Squared Error，MSE），平均绝对百分误差（Mean Absolute Percentage Error，MAPE），均方根误差（Root Mean Squared Error）， R2（R-Square）</li>
</ul>
</blockquote>
<h4 id="平均绝对误差"><a href="#平均绝对误差" class="headerlink" title="平均绝对误差"></a>平均绝对误差</h4><ul>
<li>平均绝对误差（Mean Absolute Error，MAE）:其能更好地反映预测值与真实值误差的实际情况，其计算公式如下：<br>$$MAE=\frac{1}{N} \sum_{i=1}^{N}\left|y_{i}-\hat{y}_{i}\right|$$</li>
</ul>
<h3 id="均方误差"><a href="#均方误差" class="headerlink" title="均方误差"></a>均方误差</h3><ul>
<li>均方误差（Mean Squared Error，MSE）,均方误差,其计算公式为：<br>$$MSE=\frac{1}{N} \sum_{i}^{N}\left(y_{i}-\hat{y}_{i}\right)^{2}$$</li>
</ul>
<h3 id="R2（R-Square）"><a href="#R2（R-Square）" class="headerlink" title="R2（R-Square）"></a>R2（R-Square）</h3><ul>
<li>残差平方和:<br>$$SS_{res}=\sum\left(y_{i}-\hat{y}_{i}\right)^{2}$$</li>
<li>总平均值:<br>$$SS_{tot}=\sum\left(y_{i}-\overline{y}_{i}\right)^{2}$$</li>
<li>其中$\overline{y}$表示$y$的平均值得到$R^2$的表达式为:</li>
</ul>
<p>$$R^{2}=1-\frac{SS_{res}}{SS_{tot}}$$</p>
<p>$R^2$用于度量因变量的变异中可由自变量解释部分所占的比例，取值范围是 0~1，$R^2$越接近1,表明回归平方和占总平方和的比例越大,回归线与各观测点越接近，用x的变化来解释y值变化的部分就越多,回归的拟合程度就越好。所以$R^2$也称为拟合优度（Goodness of Fit）的统计量</p>
<p>$y_{i}$表示真实值,</p>
<p>$\hat{y}_{i}$表示预测值,</p>
<p>$\overline{y}_{i}$表示样本均值。得分越高拟合效果越好</p>
<h3 id="几何解释"><a href="#几何解释" class="headerlink" title="几何解释"></a>几何解释</h3><p><img src="https://s1.ax1x.com/2020/03/21/8hqPgA.png" alt=""><br>上图红色点是incoming自变量与Consuming因变量对应的散点图，蓝色线是回归方程线（最小二乘法得到）；<br>这里红色点$y_{i}$表示一个响应观测值点（共4个），蓝色点$f_{i}$是响应观测值对应的回归曲线上的点，两个的差值就是残差，残差值共有4个,$\overline{y}$是响应变量的平均值。</p>
<p>根据平方和分解公式:<br><img src="https://s1.ax1x.com/2020/03/21/8hquCQ.jpg" alt=""><br>即：SS 总体=SS 回归 + SS 残差 (观测值与平均值的差值平方和被残差平方和以及回归差值平方和之和解释)</p>
<h1 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h1><ol>
<li>此题为传统的数据挖掘问题，通过数据科学以及机器学习深度学习的办法来进行建模得到结果。</li>
<li>此题是一个典型的回归问题。</li>
<li>主要应用xgb、lgb、catboost，以及pandas、numpy、matplotlib、seabon、sklearn、keras等等数据挖掘常用库或者框架来进行数据挖掘任务。</li>
<li>通过EDA来挖掘数据的联系和自我熟悉数据</li>
</ol>
]]></content>
      <categories>
        <category>数据挖掘及机器学习</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用github创建博客</title>
    <url>/2020/03/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>-利用 Github 搭建博客需要熟悉git方便管理.操作<a href="http://iissnan.com/progit/" target="_blank" rel="noopener">如果对git感兴趣请参考</a></p>
<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><ul>
<li>因为 hexo 是基于 node 框架的,先下载安装 node ,查看<code>node -v</code>版本,没有的话就根据提示操作</li>
</ul>
<h2 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h2><ul>
<li>安装 nodejs 肯定要安装 npm ,Ubuntu下载可能会很慢,建议换成国内源,参考<a href="https://www.cnblogs.com/vipstone/p/9038023.html" target="_blank" rel="noopener">Ubuntu apt-get和pip源更换</a></li>
</ul>
<h2 id="初始化-blog"><a href="#初始化-blog" class="headerlink" title="初始化 blog"></a>初始化 blog</h2><ol>
<li>安装 hexo ,在 终端 中输入:<code>npm install hexo-cli -g</code>(<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">参考Hexo文档</a>)</li>
<li>初始化 blog 目录:<code>hexo init happybear1234.github.io</code>(这里的 happybear1234 换成你自己的英文名,我这里就是github的用户名)</li>
<li>初始化之后,进入到 blog 目录下:<code>cd happybear1234.github.io</code>(以后对博客的所以操作都是在这)</li>
<li>安装<code>npm install</code></li>
<li>clean一下:<code>hexo clean</code></li>
<li>生成静态页面:<code>hexo g</code></li>
<li>运行起来:<code>hexo s</code></li>
</ol>
<ul>
<li>打开浏览器,输入 终端 里网址 localhost:4000 就能看到了(如果提示服务端口被占用,可以换个端口,<code>hexo server -p 5000</code>)</li>
</ul>
<h1 id="选一个Hexo主题"><a href="#选一个Hexo主题" class="headerlink" title="选一个Hexo主题"></a>选一个Hexo主题</h1><ul>
<li>这里提供<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">知乎答主们推荐的hexo主题大全</a>,刚开始为了熟悉各种配置建议使用 NexT 主题,因为文档比较详细,界面也很简洁,如果安装 NexT 主题和配置可以参考<a href="https://theme-next.org/docs/getting-started/" target="_blank" rel="noopener">文档</a></li>
</ul>
<h1 id="部署到网上"><a href="#部署到网上" class="headerlink" title="部署到网上"></a>部署到网上</h1><ul>
<li>现在的 blog 只能自己本地访问,可以使用 Github Pages 免费部署</li>
</ul>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ul>
<li>创建一个 xxx.github.io 的 public 仓库,这里 xxx 写你的名字,我这里写的 happybear1234.github.io,那么之后我就可以用 happybear1234.github.io 来访问了</li>
</ul>
<h2 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 hexo-deployer-git</h2><ul>
<li>在 blog 目录下输入下面命令,这样本地的文章才能 push 到 Github 上面去<br>  <code>npm install hexo-deployer-git --save</code></li>
</ul>
<h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><ul>
<li><p>打开 blog 目录下配置文件:<code>vi _config.yml</code>,输入你的 git 地址:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  	    type: git</span><br><span class="line">  	    repo: https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxxx.github.io.git</span><br></pre></td></tr></table></figure>
<h2 id="推送网站到-Github-上"><a href="#推送网站到-Github-上" class="headerlink" title="推送网站到 Github 上"></a>推送网站到 Github 上</h2></li>
<li><p>直接在 blog 目录下输入:<code>hexo d</code></p>
</li>
<li><p>push 上去以后你就可以输入 xxx.github.io 进行访问啦</p>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
